---
import BaseLayout from '../../layouts/BaseLayout.astro';
import TimelineItem from '../../components/TimelineItem.astro';
import { getCollection } from 'astro:content';

// シンプルな日付フォーマット関数
function formatDate(dateStr: string) {
  if (!dateStr) return '';
  const date = new Date(dateStr);
  if (isNaN(date.getTime())) return '';
  
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}/${month}/${day}`;
}

const posts = await getCollection('posts');
const categories = posts.reduce((acc, post) => {
  const category = post.data.category || 'Uncategorized';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(post);
  return acc;
}, {} as Record<string, any[]>);

// カテゴリーをアルファベット順にソート
const sortedCategories = Object.entries(categories).sort(([a], [b]) => a.localeCompare(b));
---

<BaseLayout title="Categories">
  <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <h1 class="text-3xl font-bold text-center mb-8 text-slate-900 dark:text-slate-100">Categories</h1>
    <div class="border-l-2 border-slate-200 dark:border-slate-800">
      {sortedCategories.map(([category, posts]) => (
        <TimelineItem title={category} count={posts.length}>
          <div class="space-y-3">
            {posts
              .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
              .map(post => (
              <div class="flex gap-x-3 relative">
                <time class="text-sm text-slate-500 dark:text-slate-400 w-20 shrink-0">
                  {formatDate(post.data.date)}
                </time>
                <a href={`/posts/${post.slug}`} 
                   class="text-slate-800 dark:text-slate-200 hover:text-indigo-600 dark:hover:text-indigo-400">
                  {post.data.title}
                </a>
              </div>
            ))}
          </div>
        </TimelineItem>
      ))}
    </div>
  </div>
</BaseLayout>

<style>
  .timeline-container {
    max-width: 65ch;
    margin: 0 auto;
    padding: 2rem 1.5rem;
  }

  .page-title {
    font-size: 2.25rem;
    font-weight: 700;
    margin-bottom: 3rem;
    text-align: center;
  }

  .timeline {
    position: relative;
    padding-left: 2rem;
  }

  .timeline::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 2px;
    background: var(--color-border);
  }

  .timeline-item {
    position: relative;
    margin-bottom: 3rem;
  }

  .timeline-marker {
    position: absolute;
    left: -2.35rem;
    top: 0.5rem;
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    background: var(--color-primary);
    border: 3px solid var(--color-background);
  }

  .timeline-content {
    padding-bottom: 1.5rem;
  }

  .category-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--color-primary);
  }

  .post-count {
    font-size: 1rem;
    color: var(--color-text-muted);
  }

  .post-list {
    list-style: none;
    padding: 0;
  }

  .post-item {
    display: flex;
    gap: 1rem;
    margin: 0.75rem 0;
    line-height: 1.5;
  }

  .post-item time {
    color: var(--color-text-muted);
    font-size: 0.875rem;
    min-width: 90px;
  }

  .post-item a {
    color: var(--color-text);
    text-decoration: none;
    transition: color 0.2s;
  }

  .post-item a:hover {
    color: var(--color-primary);
  }

  @media (max-width: 640px) {
    .post-item {
      flex-direction: column;
      gap: 0.25rem;
    }
  }
</style>
