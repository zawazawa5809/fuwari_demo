---
import BaseLayout from "../../layouts/BaseLayout.astro";
import TimelineLayout from "../../layouts/TimelineLayout.astro";
import { getCollection } from "astro:content";

const posts = await getCollection("posts");

// カテゴリーの収集と記事数のカウント
const categories = posts.reduce(
  (acc, post) => {
    const category = post.data.category;
    if (!category) return acc;

    const normalizedCategory = category.toLowerCase();
    if (!acc[normalizedCategory]) {
      acc[normalizedCategory] = {
        name: category,
        count: 0,
        posts: [],
      };
    }
    acc[normalizedCategory].count++;
    acc[normalizedCategory].posts.push(post);
    return acc;
  },
  {} as Record<string, { name: string; count: number; posts: any[] }>
);

// カテゴリーを記事数順にソート
const sortedCategories = Object.values(categories).sort(
  (a, b) => b.count - a.count
);
---

<BaseLayout title="Categories">
  <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <h1
      class="text-3xl font-bold text-center mb-8 text-slate-900 dark:text-slate-100"
    >
      Categories
    </h1>

    <div class="mb-8 flex flex-wrap gap-2">
      <a
        href="#"
        class="category-link inline-flex items-center px-3 py-1 text-sm bg-gray-100 dark:bg-gray-800 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-200"
        data-category=""
      >
        <span class="text-gray-700 dark:text-gray-300">All</span>
        <span class="ml-2 text-gray-500 dark:text-gray-500"
          >({posts.length})</span
        >
      </a>
      {
        sortedCategories.map(({ name, count }) => (
          <a
            href={`#${name.toLowerCase()}`}
            class="category-link inline-flex items-center px-3 py-1 text-sm bg-gray-100 dark:bg-gray-800 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-200"
            data-category={name.toLowerCase()}
          >
            <span class="text-gray-700 dark:text-gray-300">{name}</span>
            <span class="ml-2 text-gray-500 dark:text-gray-500">({count})</span>
          </a>
        ))
      }
    </div>

    <TimelineLayout posts={posts} />
  </div>
</BaseLayout>

<script>
  function updateActiveCategory() {
    const hash = window.location.hash.slice(1).toLowerCase();
    const categoryLinks = document.querySelectorAll(".category-link");

    categoryLinks.forEach((link) => {
      const linkCategory =
        (link as HTMLElement).dataset.category?.toLowerCase() || "";
      const isActive = linkCategory === hash;

      if (isActive) {
        link.classList.add("active", "bg-primary-500");
        link.classList.remove("bg-gray-100", "dark:bg-gray-800");
        const spans = link.querySelectorAll("span");
        spans.forEach((span) => span.classList.add("text-white"));
      } else {
        link.classList.remove("active", "bg-primary-500");
        link.classList.add("bg-gray-100", "dark:bg-gray-800");
        const spans = link.querySelectorAll("span");
        spans.forEach((span) => {
          span.classList.remove("text-white");
          if (span.classList.contains("text-gray-500")) {
            span.classList.add("dark:text-gray-500");
          } else {
            span.classList.add("text-gray-700", "dark:text-gray-300");
          }
        });
      }
    });

    // Dispatch event for timeline filtering
    window.dispatchEvent(
      new CustomEvent("timelineFilter", { detail: { filter: hash } })
    );
  }

  // Handle category link clicks
  document.querySelectorAll(".category-link").forEach((link) => {
    link.addEventListener("click", (e) => {
      e.preventDefault();
      const href =
        (e.currentTarget as HTMLAnchorElement).getAttribute("href") || "#";
      if (href !== window.location.hash) {
        history.pushState(null, "", href);
        updateActiveCategory();
      }
    });
  });

  // Initial state and hash change handling
  window.addEventListener("load", updateActiveCategory);
  window.addEventListener("hashchange", updateActiveCategory);
</script>

<style>
  .timeline-container {
    max-width: 65ch;
    margin: 0 auto;
    padding: 2rem 1.5rem;
  }

  .page-title {
    font-size: 2.25rem;
    font-weight: 700;
    margin-bottom: 3rem;
    text-align: center;
  }

  .timeline {
    position: relative;
    padding-left: 2rem;
  }

  .timeline::before {
    content: "";
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 2px;
    background: var(--color-border);
  }

  .timeline-item {
    position: relative;
    margin-bottom: 3rem;
  }

  .timeline-marker {
    position: absolute;
    left: -2.35rem;
    top: 0.5rem;
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    background: var(--color-primary);
    border: 3px solid var(--color-background);
  }

  .timeline-content {
    padding-bottom: 1.5rem;
  }

  .category-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--color-primary);
  }

  .post-count {
    font-size: 1rem;
    color: var (--color-text-muted);
  }

  .post-list {
    list-style: none;
    padding: 0;
  }

  .post-item {
    display: flex;
    gap: 1rem;
    margin: 0.75rem 0;
    line-height: 1.5;
  }

  .post-item time {
    color: var(--color-text-muted);
    font-size: 0.875rem;
    min-width: 90px;
  }

  .post-item a {
    color: var(--color-text);
    text-decoration: none;
    transition: color 0.2s;
  }

  .post-item a:hover {
    color: var(--color-primary);
  }

  @media (max-width: 640px) {
    .post-item {
      flex-direction: column;
      gap: 0.25rem;
    }
  }

  .category-link.active {
    @apply bg-primary-500 text-white;
  }

  .category-link {
    transition: all 0.3s ease;
  }

  .category-link.active {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
</style>
