---
import BaseLayout from "../../layouts/BaseLayout.astro";
import TimelineLayout from "../../layouts/TimelineLayout.astro";
import { getCollection } from "astro:content";
import { normalizeTag, findOriginalTag, getTagPosts } from "../../utils/topics";

const posts = await getCollection("posts");

// タグの収集と投稿の関連付け
const tags = posts.reduce(
  (acc, post) => {
    post.data.tags?.forEach((tag) => {
      const normalizedTag = normalizeTag(tag);
      if (!normalizedTag) return;

      if (!acc[normalizedTag]) {
        acc[normalizedTag] = {
          name: tag, // オリジナルのケースを保持
          posts: [],
        };
      }
      acc[normalizedTag].posts.push(post);
    });
    return acc;
  },
  {} as Record<string, { name: string; posts: any[] }>
);

// 選択されたタグの投稿を取得
const currentTag = Astro.url.hash.slice(1);
const normalizedCurrentTag = normalizeTag(currentTag);
const selectedTagPosts = normalizedCurrentTag
  ? getTagPosts(posts, normalizedCurrentTag)
  : posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// クライアントサイドでの使用のための変数
const initialPosts = selectedTagPosts.map((post) => ({
  slug: post.slug,
  data: {
    title: post.data.title,
    pubDate: post.data.pubDate,
    category: post.data.category,
    tags: post.data.tags,
    description: post.data.description,
  },
}));
---

<BaseLayout
  title={normalizedCurrentTag
    ? `#${tags[normalizedCurrentTag]?.name || currentTag}`
    : "All Tags"}
>
  <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <h1
      id="tag-title"
      class="text-3xl font-bold text-center mb-8 text-slate-900 dark:text-slate-100"
      transition:name="page-title"
    >
      {
        normalizedCurrentTag
          ? `#${tags[normalizedCurrentTag]?.name || currentTag}`
          : "All Tags"
      }
    </h1>

    <div
      id="timeline-wrapper"
      class="transition-content"
      transition:name="content"
      transition:animate="fade"
    >
      <TimelineLayout posts={selectedTagPosts} />
    </div>
  </div>
</BaseLayout>

<script define:vars={{ tags, initialPosts }}>
  let isTransitioning = false;
  const TRANSITION_DURATION = 150;

  function normalizeTag(tag) {
    return tag ? tag.toLowerCase().trim() : null;
  }

  function updateContent(tag) {
    if (isTransitioning) return;
    isTransitioning = true;

    const wrapper = document.getElementById("timeline-wrapper");
    const title = document.getElementById("tag-title");
    if (!wrapper || !title) return;

    try {
      // タイトルとコンテンツのフェードアウト
      wrapper.style.opacity = "0";
      wrapper.style.transform = "translateY(10px)";
      title.style.opacity = "0";
      title.style.transform = "translateY(-5px)";

      // トランジション時間を待つ
      setTimeout(() => {
        const normalizedTag = normalizeTag(tag);
        // タイトルを更新
        title.textContent = tag
          ? `#${tags[normalizedTag]?.name || tag}`
          : "All Tags";

        // フィルタリングして並び替え
        const filteredPosts = tag
          ? initialPosts.filter((post) =>
              post.data.tags?.some((t) => normalizeTag(t) === normalizedTag)
            )
          : initialPosts;

        const sortedPosts = filteredPosts.sort(
          (a, b) =>
            new Date(b.data.pubDate).valueOf() -
            new Date(a.data.pubDate).valueOf()
        );

        // タイムラインを更新
        const timeline = document.querySelector(".timeline-container");
        if (timeline) {
          timeline.innerHTML = generateTimelineHTML(sortedPosts);
        }

        // フェードイン
        requestAnimationFrame(() => {
          wrapper.style.opacity = "1";
          wrapper.style.transform = "translateY(0)";
          title.style.opacity = "1";
          title.style.transform = "translateY(0)";
        });
      }, TRANSITION_DURATION);
    } catch (error) {
      console.error("Error updating content:", error);
    } finally {
      setTimeout(() => {
        isTransitioning = false;
      }, TRANSITION_DURATION * 2);
    }
  }

  // ページロード時の初期表示処理
  function initializeContent() {
    const wrapper = document.getElementById("timeline-wrapper");
    const title = document.getElementById("tag-title");

    if (wrapper && title) {
      requestAnimationFrame(() => {
        wrapper.style.opacity = "1";
        wrapper.style.transform = "translateY(0)";
        title.style.opacity = "1";
        title.style.transform = "translateY(0)";
      });
    }
  }

  // イベントリスナーの設定
  document.addEventListener("astro:page-load", initializeContent);
  window.addEventListener("hashchange", () => {
    const tag = window.location.hash.slice(1);
    updateContent(tag);
  });
</script>

<style>
  .transition-content {
    opacity: 0;
    transform: translateY(10px);
    transition:
      opacity 0.15s ease-out,
      transform 0.15s ease-out;
  }

  /* タイトルのトランジション */
  #tag-title {
    transition:
      opacity 0.15s ease-out,
      transform 0.15s ease-out;
  }

  @media (prefers-reduced-motion: reduce) {
    .transition-content,
    #tag-title {
      transition: none;
      transform: none;
    }
  }

  /* モバイル対応のスタイル */
  @media (max-width: 640px) {
    .timeline-date {
      position: static !important;
      margin-bottom: 0.25rem;
    }

    .timeline-stem {
      left: 1rem !important;
    }

    .timeline-dot {
      left: 0.75rem !important;
    }

    .year-section {
      padding-left: 3rem !important;
    }
  }
</style>
