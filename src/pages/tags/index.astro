---
import BaseLayout from "../../layouts/BaseLayout.astro";
import TimelineLayout from "../../layouts/TimelineLayout.astro";
import { getCollection } from "astro:content";

const posts = await getCollection("posts");

// タグの収集と記事数のカウント（小文字で正規化）
const tags = posts.reduce(
  (acc, post) => {
    post.data.tags?.forEach((tag) => {
      const normalizedTag = tag.toLowerCase();
      if (!acc[normalizedTag]) {
        acc[normalizedTag] = {
          name: tag, // オリジナルのタグ名を保持
          count: 0,
          posts: [],
        };
      }
      acc[normalizedTag].count++;
      acc[normalizedTag].posts.push(post);
    });
    return acc;
  },
  {} as Record<string, { name: string; count: number; posts: any[] }>
);

// タグを記事数順にソート
const sortedTags = Object.values(tags).sort((a, b) => b.count - a.count);
---

<BaseLayout title="Tags">
  <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <h1
      class="text-3xl font-bold text-center mb-8 text-slate-900 dark:text-slate-100"
    >
      Tags
    </h1>

    <!-- タグリスト -->
    <div class="mb-8 flex flex-wrap gap-2">
      <a
        href="#"
        class="tag-link inline-flex items-center px-3 py-1 text-sm bg-gray-100 dark:bg-gray-800 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-200"
        data-tag=""
      >
        <span class="text-gray-700 dark:text-gray-300">All</span>
        <span class="ml-2 text-gray-500 dark:text-gray-500"
          >({posts.length})</span
        >
      </a>
      {
        sortedTags.map(({ name, count }) => (
          <a
            href={`#${name.toLowerCase()}`}
            class="tag-link inline-flex items-center px-3 py-1 text-sm bg-gray-100 dark:bg-gray-800 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-200"
            data-tag={name.toLowerCase()}
          >
            <span class="text-gray-700 dark:text-gray-300">#{name}</span>
            <span class="ml-2 text-gray-500 dark:text-gray-500">({count})</span>
          </a>
        ))
      }
    </div>

    <!-- タイムライン -->
    <TimelineLayout posts={posts} />
  </div>
</BaseLayout>

<script>
  function updateActiveTag() {
    const hash = window.location.hash.slice(1).toLowerCase();
    const tagLinks = document.querySelectorAll(".tag-link");

    tagLinks.forEach((link) => {
      const linkTag = (link as HTMLElement).dataset.tag;
      const isActive = linkTag === hash;

      if (isActive) {
        link.classList.add("active", "bg-primary-500", "text-white");
        link.classList.remove("bg-gray-100", "dark:bg-gray-800");
      } else {
        link.classList.remove("active", "bg-primary-500", "text-white");
        link.classList.add("bg-gray-100", "dark:bg-gray-800");
      }
    });

    // タイムラインの更新をトリガー
    window.dispatchEvent(
      new CustomEvent("timelineFilter", { detail: { filter: hash } })
    );
  }

  // タグリンクのクリックハンドラ
  document.querySelectorAll(".tag-link").forEach((link) => {
    link.addEventListener("click", (e) => {
      e.preventDefault();
      const href =
        (e.currentTarget as HTMLAnchorElement).getAttribute("href") || "#";
      if (href !== window.location.hash) {
        window.location.hash = href;
      } else {
        updateActiveTag(); // 同じタグをクリックした場合も更新
      }
    });
  });

  // 初期状態の設定とハッシュ変更時の処理
  window.addEventListener("load", updateActiveTag);
  window.addEventListener("hashchange", updateActiveTag);
</script>

<style>
  .tag-link {
    transition: all 0.3s ease;
  }

  .tag-link.active {
    @apply bg-primary-500 text-white;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
</style>
