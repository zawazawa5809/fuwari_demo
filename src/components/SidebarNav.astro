---
import { getCollection } from "astro:content";

// 全記事を取得してカテゴリーとタグの集計を行う
const posts = await getCollection("posts");

// カテゴリーの集計
const categories = posts.reduce(
  (acc, post) => {
    const category = post.data.category || "Uncategorized";
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  },
  {} as Record<string, number>
);

// タグの集計
const tags = posts.reduce(
  (acc, post) => {
    post.data.tags?.forEach((tag) => {
      acc[tag] = (acc[tag] || 0) + 1;
    });
    return acc;
  },
  {} as Record<string, number>
);

// カテゴリーとタグをそれぞれ記事数順にソート
const sortedCategories = Object.entries(categories).sort(
  ([, a], [, b]) => b - a
);
const sortedTags = Object.entries(tags).sort(([, a], [, b]) => b - a);
---

<div class="sidebar-nav">
  <img src="/images/avatar.png" alt="Profile" class="profile-image" />

  <nav class="nav-sections">
    <div class="nav-section">
      <h2 class="nav-title">Categories</h2>
      <ul class="nav-list">
        {
          sortedCategories.map(([category, count]) => (
            <li class="nav-item">
              <a
                href={`/categories/#${category.toLowerCase()}`}
                class="nav-link group"
              >
                <span class="nav-text">{category}</span>
                <span class="nav-count">{count}</span>
              </a>
            </li>
          ))
        }
      </ul>
    </div>

    <div class="nav-section">
      <h2 class="nav-title">Tags</h2>
      <div class="tags-cloud">
        {
          sortedTags.map(([tag, count]) => (
            <a href={`/tags/#${tag.toLowerCase()}`} class="tag-item">
              #{tag}
              <span class="tag-count">{count}</span>
            </a>
          ))
        }
      </div>
    </div>
  </nav>
</div>

<style>
  .sidebar-nav {
    padding: 1.5rem;
  }

  .profile-image {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    margin: 0 auto 2rem;
    display: block;
  }

  .nav-sections {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .nav-title {
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-text-muted);
    margin-bottom: 1rem;
  }

  .nav-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .nav-item {
    margin: 0.5rem 0;
  }

  .nav-link {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    color: var(--color-text);
    text-decoration: none;
    background: transparent;
    transition: all 0.2s;
  }

  .nav-link:hover {
    background-color: var(--color-bg-hover);
    color: var(--color-primary);
  }

  .nav-count {
    font-size: 0.75rem;
    color: var(--color-text-muted);
    background-color: var(--color-bg-muted);
    padding: 0.25rem 0.5rem;
    border-radius: 999px;
    transition: all 0.2s;
  }

  .nav-link:hover .nav-count {
    background-color: var(--color-primary);
    color: white;
  }

  .tags-cloud {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag-item {
    font-size: 0.875rem;
    color: var(--color-text-muted);
    text-decoration: none;
    padding: 0.25rem 0.75rem;
    border-radius: 999px;
    background-color: var(--color-bg-muted);
    transition: all 0.2s;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    border: 1px solid transparent;
  }

  .tag-item:hover {
    border-color: var(--color-primary);
    color: var(--color-primary);
    background-color: var(--color-bg-hover);
  }

  .tag-count {
    font-size: 0.75rem;
    opacity: 0.8;
  }
</style>

<script>
  function updateActiveLinks() {
    const currentPath = window.location.pathname;
    const hash = window.location.hash.slice(1).toLowerCase();

    // カテゴリーとタグのリンクを取得
    const links = document.querySelectorAll(".nav-link, .tag-item");

    links.forEach((link) => {
      const href = (link as HTMLAnchorElement).getAttribute("href");
      if (!href) return;

      const [path, linkHash] = href.split("#");
      const isActive = currentPath === path && (!hash || linkHash === hash);

      link.classList.toggle("active", isActive);
    });
  }

  // 初期化時とハッシュ変更時にリンクの状態を更新
  updateActiveLinks();
  window.addEventListener("hashchange", updateActiveLinks);
</script>
