---
import type { CollectionEntry } from "astro:content";

interface Props {
  posts: CollectionEntry<"posts">[];
  class?: string;
}

const { posts, class: className } = Astro.props;

const tags = [
  ...new Set(posts.map((post) => post.data.tags || []).flat()),
].sort();
---

<div class={`tags-container ${className || ""}`}>
  <h2 class="font-bold text-xl mb-4 dark:text-gray-200">Tags</h2>
  <div class="flex flex-wrap gap-2">
    {
      tags.map((tag) => (
        <a
          href={`/tags/${tag.toLowerCase()}`}
          class="tag-link inline-block px-3 py-1 text-sm rounded-full 
          bg-gray-200 hover:bg-primary-100 dark:bg-gray-700 dark:hover:bg-gray-600 
          transition-colors duration-200"
          data-tag={tag.toLowerCase()}
        >
          {tag}
        </a>
      ))
    }
  </div>
</div>

<script>
  function setupTagLinks() {
    const tagLinks = document.querySelectorAll(".tag-link");
    tagLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const tag = (e.currentTarget as HTMLAnchorElement).dataset.tag || "";

        // カスタムイベントを発火
        window.dispatchEvent(
          new CustomEvent("timelineFilter", {
            detail: { filter: tag },
          })
        );

        // URLを更新
        const href = (e.currentTarget as HTMLAnchorElement).href;
        window.history.pushState(null, "", href);
      });
    });
  }

  // 初期化処理
  setupTagLinks();

  // Astroのページ遷移後にも再初期化
  document.addEventListener("astro:page-load", setupTagLinks);
</script>
