---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import CategoryLabel from "../components/CategoryLabel.astro";

interface Props {
  posts: CollectionEntry<"posts">[];
}

const { posts } = Astro.props;

const postsByYear = posts.reduce(
  (acc, post) => {
    const year = post.data.pubDate.getFullYear();
    if (!acc[year]) acc[year] = [];
    acc[year].push(post);
    return acc;
  },
  {} as Record<number, CollectionEntry<"posts">[]>
);

const years = Object.keys(postsByYear)
  .map(Number)
  .sort((a, b) => b - a);
---

<div class="timeline-container" id="timeline-container">
  {
    years.map((year) => (
      <div class="year-section" data-year={year}>
        <div class="year-label">{year}</div>
        <div class="timeline-items">
          {postsByYear[year].map((post) => (
            <div
              class="timeline-item group"
              data-category={post.data.category?.toLowerCase() || ""}
              data-tags={
                post.data.tags?.map((tag) => tag.toLowerCase()).join(",") || ""
              }
            >
              <div class="timeline-stem" />
              <div class="timeline-dot" />

              <div class="timeline-content">
                <time class="timeline-date">
                  <FormattedDate date={post.data.pubDate} />
                </time>

                <div class="timeline-card">
                  <div class="flex items-center gap-2 mb-2">
                    {post.data.category && (
                      <CategoryLabel category={post.data.category} />
                    )}
                  </div>

                  <h3 class="timeline-title">
                    <a
                      href={`/posts/${post.slug}/`}
                      transition:name={`title-${post.slug}`}
                    >
                      {post.data.title}
                    </a>
                  </h3>

                  {post.data.description && (
                    <p class="timeline-description">{post.data.description}</p>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    ))
  }
</div>

<script>
  interface TimelineItem extends HTMLElement {
    dataset: {
      category: string;
      tags: string;
    };
  }

  let currentFilter = "";
  let isFiltering = false;

  function filterTimelineItems(filter: string) {
    if (isFiltering) return;
    isFiltering = true;

    const items = document.querySelectorAll<TimelineItem>(".timeline-item");
    const sections = document.querySelectorAll<HTMLElement>(".year-section");

    requestAnimationFrame(() => {
      if (!filter) {
        items.forEach((item) => {
          item.style.display = "";
          item.style.opacity = "1";
        });
        sections.forEach((section) => {
          section.style.display = "";
          section.style.opacity = "1";
        });
        isFiltering = false;
        return;
      }

      items.forEach((item) => {
        const category = item.dataset.category;
        const tags = item.dataset.tags.split(",").filter(Boolean);
        const normalizedFilter = filter.toLowerCase();

        const shouldShow =
          filter === "" ||
          category.toLowerCase() === normalizedFilter ||
          tags.includes(normalizedFilter);

        if (shouldShow) {
          item.style.display = "";
          item.style.opacity = "0";
          requestAnimationFrame(() => {
            item.style.transition = "opacity 0.3s ease-in-out";
            item.style.opacity = "1";
          });
        } else {
          item.style.display = "none";
        }
      });

      // Update year sections visibility
      sections.forEach((section) => {
        const hasVisibleItems = Array.from(
          section.querySelectorAll(".timeline-item")
        ).some((item) => (item as HTMLElement).style.display !== "none");

        if (hasVisibleItems) {
          section.style.display = "";
          section.style.opacity = "1";
        } else {
          section.style.opacity = "0";
          setTimeout(() => {
            if (!hasVisibleItems) {
              section.style.display = "none";
            }
          }, 300);
        }
      });

      isFiltering = false;
    });
  }

  function handleFilterChange(newFilter: string) {
    if (newFilter !== currentFilter) {
      currentFilter = newFilter;
      filterTimelineItems(newFilter);
    }
  }

  // Initial load and hash change handlers
  window.addEventListener("load", () => {
    const hash = window.location.hash.slice(1).toLowerCase();
    handleFilterChange(hash);
  });

  window.addEventListener("hashchange", () => {
    const hash = window.location.hash.slice(1).toLowerCase();
    handleFilterChange(hash);
  });

  // Custom event handler for timeline filtering
  window.addEventListener("timelineFilter", ((e: CustomEvent) => {
    handleFilterChange(e.detail.filter);
  }) as EventListener);
</script>

<style>
  .timeline-container {
    @apply relative w-full max-w-3xl mx-auto;
    min-height: 200px;
  }

  .year-section {
    @apply relative pl-8 sm:pl-32 py-6;
    transition: opacity 0.3s ease-in-out;
  }

  .timeline-item {
    @apply relative mb-8 last:mb-0;
    transition: opacity 0.3s ease-in-out;
  }

  .timeline-stem {
    @apply absolute left-0 sm:left-[8.5rem] h-full w-[3px] bg-primary-200 dark:bg-primary-800/30 group-last:h-6;
  }

  .timeline-dot {
    @apply absolute left-[-5px] sm:left-32 rounded-full bg-primary-500 border-4 border-white dark:border-gray-900 w-3 h-3 mt-1.5;
  }

  .timeline-content {
    @apply relative flex flex-col sm:flex-row items-start mb-3;
  }

  .timeline-date {
    @apply sm:absolute left-[-8rem] text-sm text-gray-600 dark:text-gray-400;
  }

  .timeline-card {
    @apply bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 w-full
    transition-all duration-300 ease-in-out hover:shadow-lg
    dark:shadow-gray-900/10 dark:hover:shadow-gray-900/20;
  }

  .timeline-title {
    @apply text-lg font-semibold mb-2;
  }

  .timeline-title a {
    @apply hover:text-primary-500 transition-colors;
  }

  .timeline-description {
    @apply text-gray-600 dark:text-gray-400 text-sm;
  }

  /* モバイル対応 */
  @media (max-width: 640px) {
    .timeline-stem {
      @apply left-4;
    }

    .timeline-dot {
      @apply left-3;
    }

    .year-section {
      @apply pl-12;
    }

    .timeline-date {
      @apply static mb-1 block;
    }
  }

  /* アニメーション */
  .timeline-card {
    animation: fade-in-up 0.5s ease-out;
  }

  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .hidden {
    display: none !important;
  }
</style>
