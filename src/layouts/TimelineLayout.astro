---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import CategoryLabel from "../components/CategoryLabel.astro";
import type { TopicFilter } from "../types/Topic";
import { filterPostsByTopic } from "../utils/topics";

interface Props {
  posts: CollectionEntry<"posts">[];
  initialFilter?: TopicFilter;
}

const { posts, initialFilter } = Astro.props;

const postsByYear = posts.reduce(
  (acc, post) => {
    const year = post.data.pubDate.getFullYear();
    if (!acc[year]) acc[year] = [];
    acc[year].push(post);
    return acc;
  },
  {} as Record<number, CollectionEntry<"posts">[]>
);

const years = Object.keys(postsByYear)
  .map(Number)
  .sort((a, b) => b - a);
---

<div class="timeline-container" id="timeline-container">
  {
    years.map((year) => (
      <div class="year-section" data-year={year}>
        <div class="year-label">{year}</div>
        <div class="timeline-items">
          {postsByYear[year].map((post) => (
            <div
              class="timeline-item group"
              data-category={post.data.category?.toLowerCase() || ""}
              data-tags={
                post.data.tags?.map((tag) => tag.toLowerCase()).join(",") || ""
              }
            >
              <div class="timeline-stem" />
              <div class="timeline-dot" />

              <div class="timeline-content">
                <time class="timeline-date">
                  <FormattedDate date={post.data.pubDate} />
                </time>

                <div class="timeline-card">
                  <div class="flex items-center gap-2 mb-2">
                    {post.data.category && (
                      <CategoryLabel category={post.data.category} />
                    )}
                  </div>

                  <h3 class="timeline-title">
                    <a
                      href={`/posts/${post.slug}/`}
                      transition:name={`title-${post.slug}`}
                    >
                      {post.data.title}
                    </a>
                  </h3>

                  {post.data.description && (
                    <p class="timeline-description">{post.data.description}</p>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    ))
  }
</div>

<script>
  import type { TopicFilter } from "../types/Topic";

  let currentFilter: TopicFilter | null = null;
  let isFiltering = false;

  function filterTimelineItems(filter: TopicFilter | null) {
    if (isFiltering) return;
    isFiltering = true;

    const items = document.querySelectorAll<HTMLElement>(".timeline-item");
    const sections = document.querySelectorAll<HTMLElement>(".year-section");

    if (!items.length || !sections.length) {
      isFiltering = false;
      return;
    }

    items.forEach((item) => {
      let shouldShow = true;
      if (filter) {
        const itemCategory = item.dataset.category || "";
        const itemTags = (item.dataset.tags || "").split(",").filter(Boolean);

        if (filter.type === "category") {
          shouldShow = itemCategory === filter.value;
        } else {
          shouldShow = itemTags.some((tag) => tag === filter.value);
        }
      }

      if (shouldShow) {
        item.style.display = "";
        item.style.opacity = "1";
        item.style.transform = "translateY(0)";
      } else {
        item.style.display = "none";
        item.style.opacity = "0";
        item.style.transform = "translateY(20px)";
      }
    });

    // 年セクションの表示/非表示を更新
    sections.forEach((section) => {
      const hasVisibleItems = Array.from(
        section.querySelectorAll<HTMLElement>(".timeline-item")
      ).some((item) => item.style.display !== "none");

      section.style.display = hasVisibleItems ? "" : "none";
      section.style.opacity = hasVisibleItems ? "1" : "0";
      section.style.transform = hasVisibleItems
        ? "translateY(0)"
        : "translateY(20px)";
    });

    isFiltering = false;
  }

  // トピックフィルターイベントのリスナー
  window.addEventListener("topicFilter", ((event: CustomEvent<TopicFilter>) => {
    console.log("Topic filter event received:", event.detail); // デバッグ用
    currentFilter = event.detail;
    filterTimelineItems(currentFilter);
  }) as EventListener);

  // 初期フィルターの適用
  document.addEventListener("astro:page-load", () => {
    const initialFilter = (window as any).initialTopicFilter;
    if (initialFilter) {
      console.log("Applying initial filter:", initialFilter); // デバッグ用
      setTimeout(() => {
        filterTimelineItems(initialFilter);
      }, 100);
    }
  });
</script>

<style>
  .timeline-container {
    @apply relative w-full max-w-3xl mx-auto;
    min-height: 200px;
  }

  .year-section {
    @apply relative pl-8 sm:pl-32 py-6;
    transition: opacity 0.3s ease-in-out;
  }

  .timeline-item {
    @apply relative mb-8 last:mb-0;
    transition: all 0.3s ease-in-out;
    transform: translateY(0);
    opacity: 1;
  }

  .timeline-stem {
    @apply absolute left-0 sm:left-[8.5rem] h-full w-[3px] bg-primary-200 dark:bg-primary-800/30 group-last:h-6;
  }

  .timeline-dot {
    @apply absolute left-[-5px] sm:left-32 rounded-full bg-primary-500 border-4 border-white dark:border-gray-900 w-3 h-3 mt-1.5;
  }

  .timeline-content {
    @apply relative flex flex-col sm:flex-row items-start mb-3;
  }

  .timeline-date {
    @apply sm:absolute left-[-8rem] text-sm text-gray-600 dark:text-gray-400;
  }

  .timeline-card {
    @apply bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 w-full
    transition-all duration-300 ease-in-out hover:shadow-lg
    dark:shadow-gray-900/10 dark:hover:shadow-gray-900/20;
  }

  .timeline-title {
    @apply text-lg font-semibold mb-2;
  }

  .timeline-title a {
    @apply hover:text-primary-500 transition-colors;
  }

  .timeline-description {
    @apply text-gray-600 dark:text-gray-400 text-sm;
  }

  /* モバイル対応 */
  @media (max-width: 640px) {
    .timeline-stem {
      @apply left-4;
    }

    .timeline-dot {
      @apply left-3;
    }

    .year-section {
      @apply pl-12;
    }

    .timeline-date {
      @apply static mb-1 block;
    }
  }

  /* アニメーション */
  .timeline-card {
    animation: fade-in-up 0.4s ease-out;
  }

  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .hidden {
    display: none !important;
  }

  .timeline-item,
  .year-section {
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
  }
</style>
